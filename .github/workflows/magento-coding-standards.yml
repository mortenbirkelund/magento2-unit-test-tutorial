name: Magento Coding Standards

on: pull_request

jobs:
  eslint:
    name: ESLint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        # MOST EXAMPLES WILL REFERENCE @v1. @v2 version offers more capabilities,
        # which will allow future changes to cause likely fewer errors.
        # E.g. http://archive.ph/eqWUN#issuecomment-570072796
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Install eslint
        run: |
          yarn global add eslint

      - name: Fetch Magento 2.3 eslint rules
        run: |
          wget https://raw.githubusercontent.com/magento/magento2/2.3/dev/tests/static/testsuite/Magento/Test/Js/_files/eslint/.eslintrc-magento \
            --no-clobber \
            --output-document=.eslintrc 
            # DOES NOT OVERWRITE an existing .eslintrc file

      - name: Run eslint
        run: |
          ~/.config/yarn/global/node_modules/.bin/eslint --no-error-on-unmatched-pattern .
          # MODIFIED DEFAULT BEHAVIOUR. By default eslint fails if no JavaScript files
          # have been found in the specified path folders and subfolders
          # See http://archive.ph/79vrK#59898966
          #
          # IGNORING FILES FROM CHECKS. To ignore certain files and folders from checks
          # you can include a .eslintignore file in the root of the repository.
          # See http://archive.ph/Ejtsj#eslintignore

  phpcs:
    name: PHP CodeSniffer
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Install PHP CodeSniffer
        run: composer global require --no-progress "squizlabs/php_codesniffer=*"

      - name: Magento Coding Standard configuration for PHP CodeSniffer
        run: |
          git clone https://github.com/magento/magento-coding-standard.git /home/runner/.config/magento-conding-standard
          ~/.composer/vendor/bin/phpcs --config-set installed_paths /home/runner/.config/magento-conding-standard
          # ADAPTED TO GLOBAL PHPCS INSTALL using the installation instructions from
          # magento-coding-standard.git repository. `--config-set` requires absolute
          # paths, might cause breakage in the future if GitHub changes the $HOME
          # path.
          #
          # CANNOT JUST COPY THE RULESET as the coding standard uses additional code
          # for it's tweaked *Sniffs and DocBlock comments validation.

      - name: Run PHP CodeSniffer
        run: |
          ~/.composer/vendor/bin/phpcs --standard=Magento2 .

  phpunit:
    name: PHPUnit
    runs-on: ubuntu-latest

    services:
      mariadb:
        # MAGENTO REQUIRES DB CONNECTION DURING INSTALLATION, thus we expose a MariaDB
        # instance for this specific job. Using custom service instead of the builtin
        # MySQL server because that's not recommended anymore.
        # See http://archive.ph/WdtdD#M831
        image: mariadb
        ports:
          - 13306:3306
        env:
          MYSQL_DATABASE: magento
          MYSQL_ROOT_PASSWORD: magento

    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - uses: shivammathur/setup-php@v1
        with:
          php-version: '7.3'
          # MAGENTO DOESN'T SUPPORT PHP VERSION 7.4.* right now. We switch
          # to 7.3 to be able to install the Magento2 Community Edition
          # package. Used for PHPUnit testing, as it provides the
          # configuration and autoloader.
          extensions: intl

      - name: Install Magento2 project
        run: |
          cd ..
          composer create-project --no-progress magento/community-edition magento
          cd magento
          bin/magento setup:install \
            --base-url=http://localhost/magento2ee \
            --db-host=0.0.0.0:13306 \
            --db-name=magento \
            --db-user=root \
            --db-password=magento \
            --admin-firstname=admin \
            --admin-lastname=admin \
            --admin-email=admin@admin.com \
            --admin-user=admin \
            --admin-password=admin123 \
            --language=en_US \
            --currency=USD \
            --timezone=America/Chicago \
            --use-rewrites=1
          # MAGENTO NEEDS TO BE INSTALLED IN ORDER TO RUN TESTS, as the dev/tests
          # is created during the installation step. We need that folder for their
          # phpunit.xml.dist definition

      - name: Detect module name
        run: |
          sudo apt install -y	libxml2-utils
          FULL_NAME=$(xmllint --xpath 'string(/config/module/@name)' etc/module.xml)
          echo "::set-env name=FULL_NAME::$FULL_NAME"
          echo "::set-env name=VENDOR::"$(echo $FULL_NAME | cut -d_ -f 1)
          echo "::set-env name=MODULE::"$(echo $FULL_NAME | cut -d_ -f 2)
          # USE XMLLINT TO EXTRACT THE FULL MODULE NAME, that has the format
          # vendor_name. In the cut commands we split the string up by the '_'
          # delimiter and return the individual module name parts

      - name: Register Magento2 module
        env:
          FULL_NAME: ${{ env.FULL_NAME }}
          VENDOR: ${{ env.VENDOR }}
          MODULE: ${{ env.MODULE }}
        run: |
          cd ..
          mkdir --parents magento/app/code/$VENDOR
          ln -s `pwd`/magento2-unit-test-tutorial magento/app/code/$VENDOR/$MODULE
          cd magento
          php bin/magento module:enable $FULL_NAME

      - name: Run unit tests (and optionally install composer dependencies)
        env:
          VENDOR: ${{ env.VENDOR }}
          MODULE: ${{ env.MODULE }}
        run: |
          [ -f composer.json ] && composer install
          cd ../magento
          ./vendor/bin/phpunit -c dev/tests/unit/phpunit.xml.dist app/code/$VENDOR/$MODULE/Test/Unit
          # See http://archive.ph/TbQYe#running-only-a-subset-of-the-unit-tests
